%--------------------------------- - - - - - - - - - -  -  -  -  -   -
% SIST. REPR. CONHECIMENTO E RACIOCINIO - LEI/3

%--------------------------------- - - - - - - - - - -  -  -  -  -   -
% Invariantes

%--------------------------------- - - - - - - - - - -  -  -  -  -   -
% SICStus PROLOG: Declaracoes iniciais

:- set_prolog_flag( discontiguous_warnings,off ).
:- set_prolog_flag( single_var_warnings,off ).
:- set_prolog_flag( unknown,fail ).

%--------------------------------- - - - - - - - - - -  -  -  -  -   -
% SICStus PROLOG: definicoes iniciais

:- op( 900,xfy,'::' ).
:- dynamic '-'/1.

%--------------------------------- - - - - - - - - - -  -  -  -  -   -


%--------------------------------- - - - - - - - - - -  -  -  -  -   -

demo(Q, verdade):- 
	Q.
demo(Q, falso):- 
	-Q.
demo(Q, desconhecido):- 
	nao(Q), nao(-Q).

nao(Q):- Q, !, fail.
nao(_).

%--------------------------------- - - - - - - - - - -  -  -  -  -   -
%---Extens√£o do predicado que permite a evolucao do conhecimento

evolucao( Termo ) :-
    solucoes( Invariante,+Termo::Invariante,Lista ),
    insercao( Termo ),
    teste( Lista ).

insercao( Termo ) :-
    assert( Termo ).
insercao( Termo ) :-
    retract( Termo ),!,fail.

removerTermo( T ) :- findall( I,+T::I,L ),
    			  teste( L ),
    			  remover(T).

remover( T ) :- retract( T ).
remover( T ) :- assert( T ),!,fail.


teste( [] ).
teste( [R|LR] ) :-
    R,
    teste( LR ).

solucoes(R,T,L):-
	findall(R,T,L).

comprimento([],0).
comprimento([A|B],N):-
	comprimento(B,X), N is X+1.

concat([],L2,L2).
concat([X|L1],L2,[X|L]):-
	concat(L1,L2,L).